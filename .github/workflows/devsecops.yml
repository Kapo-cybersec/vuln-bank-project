name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  # SCA – Dependency Scanning (Snyk)
  sca:
    name: Dependency Scanning (Snyk)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Results Directory
        run: mkdir -p security-results/snyk

      - name: Run Snyk Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=security-results/snyk/scan-results.json

      - name: Generate Snyk Markdown Summary
        if: always()
        run: |
          echo "## 🛡️ Snyk Dependency Scan Results" > snyk-summary.md
          if [ -s security-results/snyk/scan-results.json ]; then
            VULNS=$(jq '.vulnerabilities | length' security-results/snyk/scan-results.json)
            if [ "$VULNS" -gt 0 ]; then
              echo "**$VULNS vulnerabilities found!**" >> snyk-summary.md
              jq -r '.vulnerabilities[] | "- *[\(.severity | ascii_upcase)]* \(.title) (\(.id)) in \(.from | join(" > "))"' security-results/snyk/scan-results.json >> snyk-summary.md
            else
              echo "✅ No vulnerabilities found!" >> snyk-summary.md
            fi
          else
            echo "No results found (scan failed?)." >> snyk-summary.md
          fi

      - name: Add Snyk Summary to GitHub Actions Summary
        if: always()
        run: cat snyk-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: security-results/snyk/scan-results.json
          retention-days: 90

  # SAST – SonarQube Scan
  sast:
    name: SAST (SonarQube)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=Kapo-cybersec_vuln-bank-project
            -Dsonar.organization=kapo-cybersec
            -Dsonar.sources=.
            -Dsonar.python.version=3.9

      - name: Create SonarQube Results Directory
        run: mkdir -p security-results/sonarqube

      - name: Fetch SonarQube Issues JSON
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" \
               "${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=Kapo-cybersec_vuln-bank-project" \
               > security-results/sonarqube/issues.json

      - name: Generate SonarQube Markdown Summary
        if: always()
        run: |
          echo "## 🔎 SonarQube SAST Results" > sonarqube-summary.md
          if [ -s security-results/sonarqube/issues.json ]; then
            ISSUES=$(jq '.issues | length' security-results/sonarqube/issues.json)
            if [ "$ISSUES" -gt 0 ]; then
              echo "**$ISSUES issues found!**" >> sonarqube-summary.md
              jq -r '.issues[] | "- *[\(.severity)]* \(.rule) at \(.component):\(.line) – \(.message | gsub("\n"; " "))"' security-results/sonarqube/issues.json >> sonarqube-summary.md
            else
              echo "✅ No issues found!" >> sonarqube-summary.md
            fi
          else
            echo "No results found (scan failed?)." >> sonarqube-summary.md
          fi

      - name: Add SonarQube Summary to GitHub Actions Summary
        if: always()
        run: cat sonarqube-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload SonarQube Results
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-results
          path: security-results/sonarqube/issues.json
          retention-days: 90

  # Secrets Scan – TruffleHog
  secrets_scan:
    name: Secrets Scan (TruffleHog)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install TruffleHog
        run: pip install trufflehog

      - name: Create TruffleHog Results Directory
        run: mkdir -p security-results/trufflehog

      - name: Run TruffleHog Scan
        run: |
          trufflehog git --repo . --json > security-results/trufflehog/scan-results.json

      - name: Generate TruffleHog Markdown Summary
        if: always()
        run: |
          echo "## 🔑 TruffleHog Secrets Scan Results" > trufflehog-summary.md
          if [ -s security-results/trufflehog/scan-results.json ]; then
            SECRETS=$(jq '.results | length' security-results/trufflehog/scan-results.json 2>/dev/null || jq '. | length' security-results/trufflehog/scan-results.json)
            if [ "$SECRETS" -gt 0 ]; then
              echo "**$SECRETS secrets found!**" >> trufflehog-summary.md
              jq -r '.results // . | .[] | "- File: \(.SourceMetadata.data.git.file), Reason: \(.Reason)"' security-results/trufflehog/scan-results.json >> trufflehog-summary.md
            else
              echo "✅ No secrets found!" >> trufflehog-summary.md
            fi
          else
            echo "No results found (scan failed?)." >> trufflehog-summary.md
          fi

      - name: Add TruffleHog Summary to GitHub Actions Summary
        if: always()
        run: cat trufflehog-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: security-results/trufflehog/scan-results.json
          retention-days: 90

  # DAST – Dynamic Application Security Testing (OWASP ZAP)
  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:18.09.7-dind
        options: --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Install docker-compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker Image for vuln-bank
        run: docker-compose build

      - name: Run vuln-bank app with Docker Compose
        run: docker-compose up -d

      - name: Wait for vuln-bank to be ready
        run: |
          until curl -s http://localhost:5000 > /dev/null; do
            echo "Waiting for vuln-bank to start..."
            sleep 5
          done

      - name: Run OWASP ZAP Baseline Scan in Named Container
        run: |
          docker run -d --name zap-dast-temp --network=host \
            zaproxy/zap-stable zap-baseline.py \
              -t http://localhost:5000 \
              -J /tmp/zap-report.json \
              -w /tmp/zap-report.md \
              -r /tmp/zap-report.html
          timeout 400 bash -c '
            while true; do
              logs=$(docker logs zap-dast-temp 2>&1)
              if echo "$logs" | grep -q "PASS:"; then exit 0; fi
              if ! docker ps | grep zap-dast-temp; then exit 0; fi
              sleep 10
            done
          '

      - name: Copy ZAP Reports from Container
        if: always()
        run: |
          mkdir -p zap-wrk
          docker cp zap-dast-temp:/tmp/zap-report.json zap-wrk/zap-report.json || true
          docker cp zap-dast-temp:/tmp/zap-report.md zap-wrk/zap-report.md || true
          docker cp zap-dast-temp:/tmp/zap-report.html zap-wrk/zap-report.html || true

      - name: Remove ZAP Container (just in case)
        if: always()
        run: docker rm -f zap-dast-temp || true

      - name: List zap-wrk directory for debug
        run: ls -al zap-wrk

      - name: Add ZAP Markdown Report to GitHub Actions Summary
        if: always()
        run: |
          echo "## 🕷️ OWASP ZAP DAST Results" >> $GITHUB_STEP_SUMMARY
          if [ -s zap-wrk/zap-report.md ]; then
            cat zap-wrk/zap-report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "No report generated!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload ZAP Reports as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-wrk/

      - name: Stop vuln-bank container
        if: always()
        run: docker-compose down

  # Container Scanning (Trivy)
  container_scan:
    name: Container Scanning (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t vulnerable-bank:latest .

      - name: Create Trivy Results Directory
        run: mkdir -p security-results/trivy

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-bank:latest'
          format: 'json'
          output: 'security-results/trivy/scan-results.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0

      - name: Generate Trivy Markdown Summary
        if: always()
        run: |
          echo "## 🐳 Trivy Container Scan Results" > trivy-summary.md
          if [ -s security-results/trivy/scan-results.json ]; then
            VULNS=$(jq '[.Results[].Vulnerabilities[]?] | length' security-results/trivy/scan-results.json)
            if [ "$VULNS" -gt 0 ]; then
              echo "**$VULNS vulnerabilities found!**" >> trivy-summary.md
              jq -r '.Results[].Vulnerabilities[]? | "- [\(.Severity)] \(.VulnerabilityID) in \(.PkgName) (\(.Title))"' security-results/trivy/scan-results.json >> trivy-summary.md
            else
              echo "✅ No vulnerabilities found!" >> trivy-summary.md
            fi
          else
            echo "No results found (scan failed?)." >> trivy-summary.md
          fi

      - name: Add Trivy Summary to GitHub Actions Summary
        if: always()
        run: cat trivy-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: security-results/trivy/scan-results.json
          retention-days: 90
